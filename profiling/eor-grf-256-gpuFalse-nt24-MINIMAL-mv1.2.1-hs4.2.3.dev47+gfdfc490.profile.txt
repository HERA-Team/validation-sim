Timer unit: 1e-09 s

Total time: 1534.97 s
File: /lustre/aoc/projects/hera/smurray/miniconda3/envs/h4c-sim/lib/python3.10/site-packages/fftvis/simulate.py
Function: simulate at line 113

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   113                                           def simulate(
   114                                               ants: dict,
   115                                               freqs: np.ndarray,
   116                                               fluxes: np.ndarray,
   117                                               beam,
   118                                               crd_eq: np.ndarray,
   119                                               eq2tops: np.ndarray,
   120                                               baselines: list[tuple[int, int]] | None = None,
   121                                               precision: int = 2,
   122                                               polarized: bool = False,
   123                                               eps: float | None = None,
   124                                               beam_spline_opts: dict = None,
   125                                               max_progress_reports: int = 100,
   126                                               live_progress: bool = True,
   127                                           ):
   128                                               """
   129                                               Parameters:
   130                                               ----------
   131                                               ants : dict
   132                                                   Dictionary of antenna positions in the form {ant_index: np.array([x,y,z])}.
   133                                               freqs : np.ndarray
   134                                                   Frequencies to evaluate visibilities at in Hz.
   135                                               fluxes : np.ndarray
   136                                                   Intensity distribution of sources/pixels on the sky, assuming intensity
   137                                                   (Stokes I) only. The Stokes I intensity will be split equally between
   138                                                   the two linear polarization channels, resulting in a factor of 0.5 from
   139                                                   the value inputted here. This is done even if only one polarization
   140                                                   channel is simulated.
   141                                               beam : UVBeam
   142                                                   Beam object to use for the array. Per-antenna beams are not yet supported.
   143                                               crd_eq : np.ndarray
   144                                                   Cartesian unit vectors of sources in an ECI (Earth Centered
   145                                                   Inertial) system, which has the Earth's center of mass at
   146                                                   the origin, and is fixed with respect to the distant stars.
   147                                                   The components of the ECI vector for each source are:
   148                                                   (cos(RA) cos(Dec), sin(RA) cos(Dec), sin(Dec)).
   149                                                   Shape=(3, NSRCS).
   150                                               eq2tops : np.ndarray
   151                                                   Set of 3x3 transformation matrices to rotate the RA and Dec
   152                                                   cosines in an ECI coordinate system (see `crd_eq`) to
   153                                                   topocentric ENU (East-North-Up) unit vectors at each
   154                                                   time/LST/hour angle in the dataset. Shape=(NTIMES, 3, 3).
   155                                               baselines : list of tuples, default = None
   156                                                   If provided, only the baselines within the list will be simulated and array of shape
   157                                                   (nbls, nfreqs, ntimes) will be returned
   158                                               precision : int, optional
   159                                                   Which precision level to use for floats and complex numbers
   160                                                   Allowed values:
   161                                                   - 1: float32, complex64
   162                                                   - 2: float64, complex128
   163                                               eps : float, default = 6e-8
   164                                                   Desired accuracy of the non-uniform fast fourier transform.
   165                                               beam_spline_opts : dict, optional
   166                                                   Options to pass to :meth:`pyuvdata.uvbeam.UVBeam.interp` as `spline_opts`.
   167                                               Returns:
   168                                               -------
   169                                               vis : np.ndarray
   170                                                   Array of shape (nfreqs, ntimes, nants, nants) if polarized is False, and
   171                                                   (nfreqs, ntimes, nfeed, nfeedd, nants, nants) if polarized is True.
   172                                               """
   173         1       7105.0   7105.0      0.0      if not tm.is_tracing() and logger.isEnabledFor(logging.INFO):
   174                                                   tm.start()
   175                                           
   176         1   14547268.0    1e+07      0.0      highest_peak = logutils.memtrace(0)
   177                                           
   178                                               # Get sizes of inputs
   179         1       8772.0   8772.0      0.0      nfreqs = np.size(freqs)
   180         1        744.0    744.0      0.0      nants = len(ants)
   181         1       1307.0   1307.0      0.0      ntimes = len(eq2tops)
   182                                           
   183         1        275.0    275.0      0.0      if polarized:
   184         1        466.0    466.0      0.0          nax = nfeeds = 2
   185                                               else:
   186                                                   nax = nfeeds = 1
   187                                           
   188         1        336.0    336.0      0.0      if precision == 1:
   189                                                   real_dtype = np.float32
   190                                                   complex_dtype = np.complex64
   191                                               else:
   192         1        835.0    835.0      0.0          real_dtype = np.float64
   193         1        758.0    758.0      0.0          complex_dtype = np.complex128
   194                                           
   195         1        240.0    240.0      0.0      if eps is None:
   196         1       3731.0   3731.0      0.0          eps = default_accuracy_dict[precision]
   197                                           
   198                                               # Get the redundant groups - TODO handle this better
   199         1        527.0    527.0      0.0      if not baselines:
   200                                                   reds = utils.get_pos_reds(ants, include_autos=True)
   201                                                   baselines = [red[0] for red in reds]
   202                                                   nbls = len(baselines)
   203                                                   bl_to_red_map = {red[0]: np.array(red) for red in reds}
   204                                                   expand_vis = True
   205                                               else:
   206         1        441.0    441.0      0.0          nbls = len(baselines)
   207         1        295.0    295.0      0.0          expand_vis = False
   208                                           
   209                                               # Check if the beam is complex
   210         2  416797071.0    2e+08      0.0      beam_values, _ = beam.interp(
   211         1      22281.0  22281.0      0.0          az_array=np.array([0]), za_array=np.array([0]), freq_array=np.array([freqs[0]])
   212                                               )
   213         1      18026.0  18026.0      0.0      is_beam_complex = np.issubdtype(beam_values.dtype, np.complexfloating)
   214                                           
   215                                               # Convert to correct precision
   216         1    2273302.0    2e+06      0.0      crd_eq = crd_eq.astype(real_dtype)
   217         1      17754.0  17754.0      0.0      eq2tops = eq2tops.astype(real_dtype)
   218                                           
   219                                               # Factor of 0.5 accounts for splitting Stokes between polarization channels
   220         1    3472616.0    3e+06      0.0      Isky = (0.5 * fluxes).astype(complex_dtype)
   221                                           
   222                                               # Compute baseline vectors
   223         3     201565.0  67188.3      0.0      blx, bly = np.array([ants[bl[1]] - ants[bl[0]] for bl in baselines])[
   224         1       2393.0   2393.0      0.0          :, :2
   225         1       8852.0   8852.0      0.0      ].T.astype(real_dtype)
   226                                           
   227                                               # Generate visibility array
   228         1        444.0    444.0      0.0      if expand_vis:
   229                                                   vis = np.zeros(
   230                                                       (ntimes, nants, nants, nfeeds, nfeeds, nfreqs), dtype=complex_dtype
   231                                                   )
   232                                               else:
   233         1     151617.0 151617.0      0.0          vis = np.zeros((ntimes, nbls, nfeeds, nfeeds, nfreqs), dtype=complex_dtype)
   234                                           
   235                                               
   236                                               # Have up to 100 reports as it iterates through time.
   237         1       1361.0   1361.0      0.0      report_chunk = ntimes // max_progress_reports + 1
   238         1     434994.0 434994.0      0.0      pr = psutil.Process()
   239         1       2243.0   2243.0      0.0      tstart = time.time()
   240         1      95030.0  95030.0      0.0      mlast = pr.memory_info().rss
   241         1        282.0    282.0      0.0      plast = tstart
   242                                           
   243         1   15379283.0    2e+07      0.0      highest_peak = logutils.memtrace(highest_peak)
   244                                           
   245         2    7344083.0    4e+06      0.0      with Progress() as progress:
   246                                                   
   247         1     854911.0 854911.0      0.0          simtimes_task = progress.add_task("Simulating Times", total=ntimes, visible=live_progress)
   248                                           
   249                                                   # Loop over time samples
   250       721    3394331.0   4707.8      0.0          for ti, eq2top in enumerate(eq2tops):
   251                                                       # Convert to topocentric coordinates
   252       720 6080302992.0    8e+06      0.4              tx, ty, tz = np.dot(eq2top, crd_eq)
   253                                           
   254                                                       # Only simulate above the horizon
   255       720  378545339.0 525757.4      0.0              above_horizon = tz > 0
   256       720  646758212.0 898275.3      0.0              tx = tx[above_horizon]
   257       720  660587919.0 917483.2      0.0              ty = ty[above_horizon]
   258                                           
   259                                                       # Number of above horizon points
   260       720  441084501.0 612617.4      0.0              nsim_sources = above_horizon.sum()
   261                                           
   262       720    1793486.0   2491.0      0.0              if nsim_sources == 0:
   263                                                           continue
   264                                           
   265                                                       # Form the visibility array
   266       720    9395333.0  13049.1      0.0              _vis = np.zeros((nfeeds, nfeeds, nbls, nfreqs), dtype=complex_dtype)
   267                                           
   268       720     680652.0    945.4      0.0              if is_beam_complex and expand_vis:
   269                                                           _vis_negatives = np.zeros(
   270                                                               (nfeeds, nfeeds, nbls, nfreqs), dtype=complex_dtype
   271                                                           )
   272                                           
   273                                                       # Compute azimuth and zenith angles
   274       720        2e+10    3e+07      1.3              az, za = conversions.enu_to_az_za(enu_e=tx, enu_n=ty, orientation="uvbeam")
   275                                           
   276      1440    7171030.0   4979.9      0.0              for fi in range(nfreqs):
   277                                                           # Compute uv coordinates
   278       720    1748401.0   2428.3      0.0                  u, v = (
   279       720   21721833.0  30169.2      0.0                      blx * freqs[fi] / utils.speed_of_light,
   280       720    8631150.0  11987.7      0.0                      bly * freqs[fi] / utils.speed_of_light,
   281                                                           )
   282                                           
   283                                                           # Compute beams - only single beam is supported
   284       720 2078430214.0    3e+06      0.1                  A_s = np.zeros((nax, nfeeds, nsim_sources), dtype=complex_dtype)
   285      1440        1e+12    7e+08     62.3                  A_s = beams._evaluate_beam(
   286       720    2855727.0   3966.3      0.0                      A_s, beam, az, za, polarized, freqs[fi], spline_opts=beam_spline_opts
   287                                                           )
   288       720    7844764.0  10895.5      0.0                  A_s = A_s.transpose((1, 0, 2))
   289       720        2e+10    2e+07      1.1                  beam_product = np.einsum("abs,cbs->acs", A_s.conj(), A_s)
   290       720   11445932.0  15897.1      0.0                  beam_product = beam_product.reshape(nax * nfeeds, nsim_sources)
   291                                           
   292                                                           # Compute sky beam product
   293       720 7837911628.0    1e+07      0.5                  i_sky = beam_product * Isky[above_horizon, fi]
   294                                           
   295                                                           # Compute visibilities w/ non-uniform FFT
   296      1440        5e+11    4e+08     33.9                  _vis_here = finufft.nufft2d3(
   297       720  452836460.0 628939.5      0.0                      2 * np.pi * tx,
   298       720  402947989.0 559650.0      0.0                      2 * np.pi * ty,
   299       720     627831.0    872.0      0.0                      i_sky,
   300       720     448633.0    623.1      0.0                      u,
   301       720     292036.0    405.6      0.0                      v,
   302       720     468634.0    650.9      0.0                      modeord=0,
   303       720     458574.0    636.9      0.0                      eps=eps,
   304                                                           )
   305                                           
   306                                                           # Expand out the visibility array
   307       720   17976999.0  24968.1      0.0                  _vis[..., fi] = _vis_here.reshape(nfeeds, nfeeds, nbls)
   308                                           
   309                                                           # If beam is complex, we need to compute the reverse negative frequencies
   310       720    1061598.0   1474.4      0.0                  if is_beam_complex and expand_vis:
   311                                                               # Compute
   312                                                               _vis_here_neg = finufft.nufft2d3(
   313                                                                   2 * np.pi * tx,
   314                                                                   2 * np.pi * ty,
   315                                                                   i_sky,
   316                                                                   -u,
   317                                                                   -v,
   318                                                                   modeord=0,
   319                                                                   eps=eps,
   320                                                               )
   321                                                               _vis_negatives[..., fi] = _vis_here_neg.reshape(nfeeds, nfeeds, nbls)
   322                                           
   323                                                       # Expand out the visibility array in antenna by antenna matrix
   324       720     616989.0    856.9      0.0              if expand_vis:
   325                                                           for bi, bls in enumerate(baselines):
   326                                                               np.add.at(
   327                                                                   vis,
   328                                                                   (ti, bl_to_red_map[bls][:, 0], bl_to_red_map[bls][:, 1]),
   329                                                                   _vis[..., bi, :],
   330                                                               )
   331                                           
   332                                                               # Add the conjugate, avoid auto baselines twice
   333                                                               if bls[0] != bls[1]:
   334                                                                   # If beam is complex, we need to use the negative frequencies
   335                                                                   # otherwise, we can just use the conjugate
   336                                                                   if is_beam_complex:
   337                                                                       np.add.at(
   338                                                                           vis,
   339                                                                           (ti, bl_to_red_map[bls][:, 1], bl_to_red_map[bls][:, 0]),
   340                                                                           _vis_negatives[..., bi, :],
   341                                                                       )
   342                                                                   else:
   343                                                                       np.add.at(
   344                                                                           vis,
   345                                                                           (ti, bl_to_red_map[bls][:, 1], bl_to_red_map[bls][:, 0]),
   346                                                                           _vis[..., bi, :].conj(),
   347                                                                       )
   348                                           
   349                                                       else:
   350                                                           # Baselines were provided, so we can just add the visibilities
   351       720   19890045.0  27625.1      0.0                  vis[ti] = np.swapaxes(_vis, 2, 0)
   352                                           
   353                                                       
   354       720    1211420.0   1682.5      0.0              if not (ti % report_chunk or ti == ntimes - 1):
   355        90 1273800938.0    1e+07      0.1                  plast, mlast = logutils.log_progress(tstart, plast, ti + 1, ntimes, pr, mlast)
   356        90 1335310811.0    1e+07      0.1                  highest_peak = logutils.memtrace(highest_peak)
   357                                           
   358       720   30667642.0  42593.9      0.0              progress.update(simtimes_task, advance=1)
   359                                           
   360         1        477.0    477.0      0.0      if expand_vis:
   361                                                   return (
   362                                                       np.transpose(vis, (5, 0, 3, 4, 1, 2))
   363                                                       if polarized
   364                                                       else np.moveaxis(vis[..., 0, 0, :], 3, 0)
   365                                                   )
   366                                               else:
   367         1        249.0    249.0      0.0          return (
   368         1      20716.0  20716.0      0.0              np.transpose(vis, (4, 0, 2, 3, 1))
   369         1        247.0    247.0      0.0              if polarized
   370                                                       else np.moveaxis(vis[..., 0, 0, :], 2, 0)
   371                                                   )

Total time: 1550.42 s
File: /lustre/aoc/projects/hera/smurray/miniconda3/envs/h4c-sim/lib/python3.10/site-packages/hera_sim/visibilities/cli.py
Function: run_vis_sim at line 88

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    88                                           def run_vis_sim(args):
    89         1    1747966.0    2e+06      0.0      cprint(Panel("hera-sim-vis: Simulating Visibilities"))
    90                                           
    91         1    4734779.0    5e+06      0.0      logger.info("Initializing VisibilitySimulator object... ")
    92         1    4692817.0    5e+06      0.0      simulator = load_simulator_from_yaml(args.simulator_config)
    93         1    4227024.0    4e+06      0.0      logger.info("Finished VisibilitySimulator Init")
    94                                           
    95                                               # Make data_model, simulator, and simulation objects
    96         1    4239758.0    4e+06      0.0      logger.info("Initializing ModelData object... ")
    97         2 8008315605.0    4e+09      0.5      data_model = ModelData.from_config(
    98         1       1452.0   1452.0      0.0          args.obsparam, normalize_beams=args.normalize_beams
    99                                               )
   100         1    4802049.0    5e+06      0.0      logger.info("Finished Setting up ModelData object")
   101         1   36028083.0    4e+07      0.0      print_sim_config(args.obsparam)
   102                                           
   103         1     879454.0 879454.0      0.0      cprint(f"Using {simulator.__class__.__name__} Simulator")
   104                                           
   105                                               # Print versions
   106         2    4570310.0    2e+06      0.0      cprint(
   107         7       9230.0   1318.6      0.0          f"""
   108                                           [bold]Using the following packages:[/bold]
   109                                           
   110         1       1714.0   1714.0      0.0  \tpyuvdata: {pyuvdata.__version__}
   111         1       3180.0   3180.0      0.0  \tpyuvsim: {pyuvsim.__version__}
   112         1       1134.0   1134.0      0.0  \tpyradiosky: {pyradiosky.__version__}
   113         1       1076.0   1076.0      0.0  \thera_sim: {hera_sim.__version__}
   114         2       1519.0    759.5      0.0  \t{simulator.__class__.__name__}: {simulator.__version__}
   115                                           """
   116                                               )
   117                                           
   118         1    2829789.0    3e+06      0.0      cns.print(Rule("Important Simulation Parameters"))
   119         1     959444.0 959444.0      0.0      cns.print(f"Nfreqs  : {data_model.uvdata.Nfreqs}")
   120         1    1238818.0    1e+06      0.0      cns.print(f"Ntimes  : {len(data_model.lsts)}")
   121         1     920070.0 920070.0      0.0      cns.print(f"Npols   : {data_model.uvdata.Npols}")
   122         1     919181.0 919181.0      0.0      cns.print(f"Nants   : {data_model.uvdata.Nants_data}")
   123         1     910317.0 910317.0      0.0      cns.print(f"Nsources: {data_model.sky_model.Ncomponents}")
   124         1     914488.0 914488.0      0.0      cns.print(f"Nbeams  : {data_model.n_beams}")
   125         1     418215.0 418215.0      0.0      cns.print()
   126                                           
   127         1    2622311.0    3e+06      0.0      cns.print(Rule("Large Memory Components"))
   128         2    1027213.0 513606.5      0.0      cns.print(
   129         1      21482.0  21482.0      0.0          f"Visibility Array  : {data_model.uvdata.data_array.nbytes / 1024**2:.2f} MB"
   130                                               )
   131         2      19886.0   9943.0      0.0      beam_array_sizes = [
   132         1        443.0    443.0      0.0          b.data_array.nbytes for b in data_model.beams if hasattr(b, "data_array")
   133                                               ]
   134         1        378.0    378.0      0.0      if beam_array_sizes:
   135         1    1024790.0    1e+06      0.0          cns.print(f"Largest Beam Array: {max(beam_array_sizes) / 1024**2:.2f} MB")
   136         1    1022063.0    1e+06      0.0          cns.print(f"Total Beam Arrays : {sum(beam_array_sizes) / 1024**2:.2f} MB")
   137                                           
   138         1  229209431.0    2e+08      0.0      ram = simulator.estimate_memory(data_model)
   139         1     522809.0 522809.0      0.0      ram_avail = psutil.virtual_memory().available / 1024**3
   140                                           
   141         2    2195454.0    1e+06      0.0      cprint(
   142         3      14770.0   4923.3      0.0          f"[bold {'red' if ram < 1.5 * ram_avail else 'green'}] This simulation will use"
   143         2        580.0    290.0      0.0          f" at least {ram:.2f}GB of RAM (Available: {ram_avail:.2f}GB).[/]"
   144                                               )
   145                                           
   146         1       1402.0   1402.0      0.0      if args.object_name is None:
   147         1      65855.0  65855.0      0.0          data_model.uvdata.object_name = simulator.__class__.__name__
   148                                               else:
   149                                                   data_model.uvdata.object_name = args.object_name
   150                                           
   151         1       1299.0   1299.0      0.0      if args.dry_run:
   152                                                   cprint("Dry run finished.")
   153                                                   return
   154                                           
   155         1 5795679519.0    6e+09      0.4      simulation = VisibilitySimulation(data_model=data_model, simulator=simulator)
   156                                           
   157                                               # Run simulation
   158         1     809092.0 809092.0      0.0      cprint()
   159         1    2971147.0    3e+06      0.0      cprint(Rule("Running Simulation"))
   160         1    4559792.0    5e+06      0.0      logger.info("About to Run Simulation")
   161         1        2e+12    2e+12     99.1      simulation.simulate()
   162         1    5039181.0    5e+06      0.0      logger.info("Simulation Complete")
   163         1    1369407.0    1e+06      0.0      cprint(Rule())
   164                                           
   165         1       1042.0   1042.0      0.0      if myid != 0:  # pragma: no cover
   166                                                   # Wait for root worker to finish IO before ending all other worker procs
   167                                                   comm.Barrier()
   168                                                   sys.exit(0)
   169                                           
   170         1       8130.0   8130.0      0.0      if args.run_auto_check:
   171                                                   # Check imaginary of xx/yy autos and fix non-real values if the option is
   172                                                   # selected in the arguments
   173                                                   # xxpol = data_model.uvdata.get_data("xx")
   174                                                   # auto_idx = data_model.uvdata.ant_1_array == data_model.uvdata.ant_2_array
   175                                                   # xxpol = xxpol[auto_idx]
   176                                           
   177                                                   # max_xx_autos_to_abs = (np.abs(xxpol.imag) / np.abs(xxpol)).max()
   178                                           
   179                                                   uvd_autos = data_model.uvdata.select(
   180                                                       ant_str="auto",
   181                                                       inplace=False,
   182                                                       run_check=False,
   183                                                       run_check_acceptability=False,
   184                                                       check_extra=False,
   185                                                   )
   186                                                   xx = uvd_autos.get_data("xx")
   187                                                   max_xx_autos_to_abs = (np.abs(xx.imag) / np.abs(xx)).max()
   188                                                   if 0 < max_xx_autos_to_abs < args.max_auto_imag:
   189                                                       logger.warning(
   190                                                           f"[orange]Some autos have very small imaginary components (max ratio "
   191                                                           f"[blue]{max_xx_autos_to_abs:1.2e}[/])"
   192                                                       )
   193                                           
   194                                                       if args.fix_autos:
   195                                                           logger.info("Setting the autos to be purely real... ")
   196                                                           data_model.uvdata._fix_autos()
   197                                                           logger.info("Done fixing autos.")
   198                                           
   199                                                   elif max_xx_autos_to_abs >= args.max_auto_imag:
   200                                                       raise ValueError(
   201                                                           f"Some autos have large fractional imaginary components "
   202                                                           f"(>{args.max_auto_imag:1.2e}). Largest value = "
   203                                                           f"{np.abs(xx.imag).max():1.2e}, largest fraction="
   204                                                           f"{max_xx_autos_to_abs:1.2e}."
   205                                                       )
   206                                           
   207         1       3167.0   3167.0      0.0      if args.compress:
   208         1    5000034.0    5e+06      0.0          logger.info("Compressing data by redundancy... ")
   209                                                   # Here, we don't call the convenience function directly, because we want to
   210                                                   # be able to short-circuit the process by reading in a file.
   211         1    5188994.0    5e+06      0.0          if not Path(args.compress).exists():
   212                                                       red_gps = data_model.uvdata.get_redundancies(
   213                                                           tol=1.0, include_conjugates=True
   214                                                       )[0]
   215                                                       bl_ants = [data_model.uvdata.baseline_to_antnums(gp[0]) for gp in red_gps]
   216                                                       blt_inds = data_model.uvdata._select_preprocess(
   217                                                           antenna_nums=None,
   218                                                           antenna_names=None,
   219                                                           ant_str=None,
   220                                                           bls=bl_ants,
   221                                                           frequencies=None,
   222                                                           freq_chans=None,
   223                                                           times=None,
   224                                                           time_range=None,
   225                                                           lsts=None,
   226                                                           lst_range=None,
   227                                                           polarizations=None,
   228                                                           blt_inds=None,
   229                                                           phase_center_ids=None,
   230                                                           catalog_names=None,
   231                                                       )[0]
   232                                           
   233                                                       np.save(args.compress, blt_inds)
   234                                                   else:
   235         1   10771484.0    1e+07      0.0              blt_inds = np.load(args.compress)
   236                                           
   237         2    6523255.0    3e+06      0.0          data_model.uvdata._select_by_index(
   238         1        644.0    644.0      0.0              blt_inds, None, None, "Compressed by redundancy", keep_all_metadata=True
   239                                                   )
   240                                           
   241         1    5081735.0    5e+06      0.0          logger.info("Done with compression.")
   242                                           
   243                                               # Read obsparams to get filing config
   244         2     879559.0 439779.5      0.0      with open(args.obsparam) as file:
   245         1   14368220.0    1e+07      0.0          obsparam_dict = yaml.safe_load(file)
   246         1       1316.0   1316.0      0.0      cfg_filing = obsparam_dict["filing"]
   247         1     106258.0 106258.0      0.0      base_path = Path(cfg_filing["outdir"])
   248         1    1409292.0    1e+06      0.0      base_path.mkdir(parents=True, exist_ok=True)
   249         1      60725.0  60725.0      0.0      outfile = base_path / f"{cfg_filing['outfile_name']}.{cfg_filing['output_format']}"
   250         1       2465.0   2465.0      0.0      clobber = cfg_filing.get("clobber", False)
   251                                           
   252                                               # Write output
   253         1    5036880.0    5e+06      0.0      logger.info("Writing output... ")
   254         2   64890457.0    3e+07      0.0      data_model.uvdata.write_uvh5(
   255         1      19322.0  19322.0      0.0          outfile.as_posix(),
   256         1        245.0    245.0      0.0          clobber=clobber,
   257         1        401.0    401.0      0.0          run_check=False,
   258         1        218.0    218.0      0.0          run_check_acceptability=False,
   259                                               )
   260         1    5175085.0    5e+06      0.0      logger.info("Done Writing.")
   261                                           
   262                                               # Sync with other workers and finalise
   263         1        680.0    680.0      0.0      if HAVE_MPI:
   264                                                   comm.Barrier()
   265                                           
   266         1    1227253.0    1e+06      0.0      cprint("[green][bold]Complete![/][/]")

